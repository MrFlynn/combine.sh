#!/bin/bash
#
# Combines multiple git repositories into a single monolithic repository
# while still retaining the history from each repository. For example, this 
# could be useful for backing up multiple GitHub classroom repositories into a 
# single repository.
# 
# Maintainer: Nick Pleatsikas <nick@pleatsikas.me>
#
# shellcheck disable=SC2207,SC2145,SC2005,SC2035

#######################################
# Iterates through repositories in 
# specified folder and merges them into
# the mono repo.
# Globals:
#   None
# Arguments:
#   source_folder: folder containing repos to be merged.
# Returns:
#   None
#######################################
merge_repos () {
  # Function arguments.
  local source_folder="$1"

  echo -e "\e[1mAbsorbing $source_folder\e[22m"

  # Get name of repository.
  local current_repo_name
  current_repo_name=$(basename "$source_folder")

  # Fetch master branch of external repository.
  git fetch "$source_folder" master
  
  # Merge without commiting and then read the tree into a sub-directory.
  git merge -s ours --allow-unrelated-histories --no-commit FETCH_HEAD 
  git read-tree --prefix="$current_repo_name/" -u FETCH_HEAD

  # Add commit message.
  git commit -m "Absorbed $current_repo_name." > /dev/null 2>&1
  echo -e "\e[1mAbsorption completed\e[22m\n"
}

#######################################
# Removes all local copies of merged
# repositories.
# Globals:
#   None
# Arguments:
#   source_folder: folder containing individual repos that have already been
#                  merged.
# Returns:
#   None
#######################################
cleanup () {
  # Function arguments.
  local source_folder="$1"

  # Remove only folders. Leave files in the directory untouched.
  rm -rf "${source_folder:?}/*/"
}

#######################################
# Prints help menu.
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
usage () {
  cat << EOF
Usage: git absorb [FOLDER [FOLDER ...]] [OPTIONS]
  Combines multiple repositories into one while preserving history.

  The folder argument is required for the script to run.

  Options:
  -c  --clean   Remove local copies of repositories merged into
                the new repository when script has finished.
  -h  --help    Display this menu and exit immediately.
EOF
}

#######################################
# Main function. Parses script args and
# flags and calls functions to run.
# Globals:
#   None
# Arguments:
#   $@: All arguments passed to script.
# Returns:
#   None
#######################################
main () {
  # Check to make sure source folder where each repository is located is
  # provided.
  if [[ $# -lt 1 ]]; then
    echo "No source folder provided. Exiting..."
    exit
  elif [[ $1 = "--help" || $1 = "-h" ]]; then
    usage
    exit
  elif [[ $1 = "--"* ]]; then
    echo "No source folder provided. Exiting..."
    exit
  fi

  # Get list of folders to combine into the current repository.
  local source_folders=()

  while [[ ! $# -eq 0 ]]; do
    IFS="/" read -ra REPO_DIR <<< "$1"
    if [[ $1 = "${REPO_DIR[0]}"* ]] && [[ -n "${REPO_DIR[0]}" ]]; then
      source_folders+=("$PWD/$1")
    else
      source_folders+=("$1")
    fi
    shift
  done

  # Flag for weather or not the old repositories should be removed when the
  # script is done.
  local clean_old_repositories=false

  # Check for program flags.
  while [[ ! $# -eq 0 ]]; do
    case "$1" in
      --clean | -c)
        clean_old_repositories=true
        ;;
      --help | -h)
        usage
        exit
        ;;
      *)
        >&2 echo "Unknown option provided!"
        exit 1
        ;;
    esac
    shift
  done

  # Merge the repositories together.
  for folder in "${source_folders[@]}"; do
    if [[ -d "$folder" ]]; then
      merge_repos "$folder"
    else
      echo "$folder does not exist. Skipping..."
    fi
  done

  # Clean old copies of the copied repositories.
  if [[ $clean_old_repositories == true ]]; then
    for folder in "${source_folders[@]}"; do
      cleanup "$folder"
    done
  fi

  printf '\xE2\x9C\xA8 Absorb successful!\n'
}

main "$@"